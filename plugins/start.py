
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from pyrogram.enums import ParseMode
import time
import random
import string as rohit

from config import SHORTLINK_API, SHORTLINK_URL, VERIFY_EXPIRE, TUT_VID, BAN_SUPPORT, START_MSG
from database import db
from utils import get_shortlink, get_exp_time, is_premium_user


@Client.on_message(filters.command('start') & filters.private)
async def start_command(client, message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    is_premium = await is_premium_user(user_id)
    verify_status = await db.get_verify_status(user_id)

    # CASE 1: Plain /start
    if text == "/start":
        return await message.reply_text(
            START_MSG.format(
                first=message.from_user.first_name,
                last=message.from_user.last_name,
                username='@' + message.from_user.username if message.from_user.username else None,
                mention=message.from_user.mention,
                id=message.from_user.id
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('ü§§ J·¥è…™…¥ A·¥Ö·¥ú ü·¥õ H·¥ú ô', url='https://t.me/+oOvo2Un_OC4xNWIx')],
                [
                    InlineKeyboardButton('üçø M·¥è·¥†…™·¥á …¢ Ä·¥è·¥ú·¥ò', url='https://t.me/MovieRequestGroupNj'),
                    InlineKeyboardButton('ü§ñ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url='https://t.me/unfiltered_stuf')
                ],
                [
                    InlineKeyboardButton('üíÅ‚Äç‚ôÄÔ∏è  ú·¥á ü·¥ò', callback_data='help'),
                    InlineKeyboardButton('üòä ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')
                ]
            ]),
            parse_mode=ParseMode.HTML
        )

    # CASE 2: /start verify_TOKEN
    elif text.startswith("/start verify_"):
        try:
            token = text.split("verify_")[1]
            if verify_status['verify_token'] != token:
                return await message.reply("‚ùå Invalid or expired token. Please click /start again.")
            await db.update_verify_status(user_id, is_verified=True, verified_time=time.time())
            current = await db.get_verify_count(user_id)
            await db.set_verify_count(user_id, current + 1)
            return await message.reply("‚úÖ You have been verified successfully.")
        except Exception:
            return await message.reply("‚ö†Ô∏è Invalid verification link. Please click /start again.")


@Client.on_callback_query()
async def callback_handler(client, callback_query: CallbackQuery):
    data = callback_query.data

    elif data == "about":
    await callback_query.message.edit(
        text="<b>üëë A ô·¥è·¥ú·¥õ:\n\nI ·¥Ä·¥ç ·¥Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á Íú∞…™ ü·¥á s·¥õ·¥è Ä·¥á  ô·¥è·¥õ ·¥°…™·¥õ ú ·¥Ä·¥Ös & ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ú…¥ ü·¥è·¥Ñ·¥ã.</b>",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚üµ B·¥Ä·¥Ñ·¥ã", callback_data="back")]
        ]),
        parse_mode=ParseMode.HTML
    )

I ·¥Ä·¥ç ·¥Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á Íú∞…™ ü·¥á s·¥õ·¥è Ä·¥á  ô·¥è·¥õ ·¥°…™·¥õ ú ·¥Ä·¥Ös & ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ú…¥ ü·¥è·¥Ñ·¥ã.</b>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚üµ B·¥Ä·¥Ñ·¥ã", callback_data="back")]
            ]),
            parse_mode=ParseMode.HTML
        )

    elif data == "help":
        await callback_query.message.edit(
            text="<b><blockquote>T ú…™s …™s A…¥ P Ä…™·¥†·¥Ä·¥õ·¥á F…™ ü·¥á S·¥õ·¥è Ä·¥á B·¥è·¥õ W·¥è Ä·¥ã…™…¥…¢ …™…¥ @·¥ú…¥“ì…™ ü·¥õ·¥á Ä·¥á·¥Ö_s·¥õ·¥ú“ì

‚ùè B·¥è·¥õ C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös
‚îú /start : S·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ
‚îú /about : A ô·¥è·¥ú·¥õ ·¥õ ú·¥á  ô·¥è·¥õ
‚îî /help : H·¥á ü·¥ò M·¥á…¥·¥ú

S…™·¥ç·¥ò ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ /start ·¥õ·¥è  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ.</blockquote></b>

<b>D·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö B è:</b> <a href='https://t.me/Mrxonfiree'>M Äx·¥è…¥Íú∞…™ Ä·¥á</a>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚üµ B·¥Ä·¥Ñ·¥ã", callback_data="back")]
            ]),
            parse_mode=ParseMode.HTML
        )

    elif data == "premium":
        await callback_query.message.edit(
            text="<b>üíé Premium Plan:</b>

U…¥ ü·¥è·¥Ñ·¥ã ·¥Ä ü ü Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥ás  ô è ·¥ú·¥ò…¢ Ä·¥Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç.
C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ @Mrxonfiree ·¥õ·¥è ·¥ò·¥ú Ä·¥Ñ ú·¥Äs·¥á.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚üµ B·¥Ä·¥Ñ·¥ã", callback_data="back")]
            ]),
            parse_mode=ParseMode.HTML
        )

    elif data == "back":
        await callback_query.message.edit(
            text=START_MSG.format(
                first=callback_query.from_user.first_name,
                last=callback_query.from_user.last_name,
                username='@' + callback_query.from_user.username if callback_query.from_user.username else None,
                mention=callback_query.from_user.mention,
                id=callback_query.from_user.id
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('ü§§ J·¥è…™…¥ A·¥Ö·¥ú ü·¥õ H·¥ú ô', url='https://t.me/+oOvo2Un_OC4xNWIx')],
                [
                    InlineKeyboardButton('üçø M·¥è·¥†…™·¥á …¢ Ä·¥è·¥ú·¥ò', url='https://t.me/MovieRequestGroupNj'),
                    InlineKeyboardButton('ü§ñ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url='https://t.me/unfiltered_stuf')
                ],
                [
                    InlineKeyboardButton('üíÅ‚Äç‚ôÄÔ∏è  ú·¥á ü·¥ò', callback_data='help'),
                    InlineKeyboardButton('üòä ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')
                ]
            ]),
            parse_mode=ParseMode.HTML
        )

    elif data == "close":
        await callback_query.message.delete()
